#![feature(prelude_import)]
#![deny(missing_docs)]
//! Simple showcase example.
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use crate::uuid::Uuid;
use async_trait::async_trait;
use chrono::{DateTime, Utc};
use leptos::*;
use leptos_struct_table::*;
use serde::{Deserialize, Serialize};
/// This generates the component BookTable
#[table(sortable)]
pub struct Book {
    /// Id of the entry.
    #[table(key)]
    pub id: Uuid,
    /// Title of the book.
    pub title: String,
    /// Author of the book.
    #[table(editable)]
    pub author: String,
    /// Date when book has been published.
    #[table(editable, format(string = "%Y-%m-%d %H:%M:%S %z"))]
    pub publish_date: DateTime<Utc>,
    /// Example on hidden member.
    #[table(skip)]
    pub hidden_field: String,
}
/// Generated by leptos-struct-table-macro
struct BookTableClassesProvider;
#[automatically_derived]
impl ::core::marker::Copy for BookTableClassesProvider {}
#[automatically_derived]
impl ::core::clone::Clone for BookTableClassesProvider {
    #[inline]
    fn clone(&self) -> BookTableClassesProvider {
        *self
    }
}
impl TableClassesProvider for BookTableClassesProvider {
    fn new() -> Self {
        Self
    }
}
/// Generated by leptos-struct-table-macro
pub enum BookColumnName {
    /// Generated by leptos-struct-table-macro
    #[default]
    Id,
    /// Generated by leptos-struct-table-macro
    Title,
    /// Generated by leptos-struct-table-macro
    Author,
    /// Generated by leptos-struct-table-macro
    PublishDate,
}
#[automatically_derived]
impl ::core::marker::Copy for BookColumnName {}
#[automatically_derived]
impl ::core::clone::Clone for BookColumnName {
    #[inline]
    fn clone(&self) -> BookColumnName {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for BookColumnName {}
#[automatically_derived]
impl ::core::cmp::PartialEq for BookColumnName {
    #[inline]
    fn eq(&self, other: &BookColumnName) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag
    }
}
#[automatically_derived]
impl ::core::marker::StructuralEq for BookColumnName {}
#[automatically_derived]
impl ::core::cmp::Eq for BookColumnName {
    #[inline]
    #[doc(hidden)]
    #[no_coverage]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::fmt::Debug for BookColumnName {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::write_str(
            f,
            match self {
                BookColumnName::Id => "Id",
                BookColumnName::Title => "Title",
                BookColumnName::Author => "Author",
                BookColumnName::PublishDate => "PublishDate",
            },
        )
    }
}
#[automatically_derived]
impl ::core::default::Default for BookColumnName {
    #[inline]
    fn default() -> BookColumnName {
        Self::Id
    }
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for BookColumnName {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "variant identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::invalid_value(
                                    _serde::de::Unexpected::Unsigned(__value),
                                    &"variant index 0 <= i < 4",
                                ),
                            )
                        }
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "Id" => _serde::__private::Ok(__Field::__field0),
                        "Title" => _serde::__private::Ok(__Field::__field1),
                        "Author" => _serde::__private::Ok(__Field::__field2),
                        "PublishDate" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            _serde::__private::Err(
                                _serde::de::Error::unknown_variant(__value, VARIANTS),
                            )
                        }
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"Id" => _serde::__private::Ok(__Field::__field0),
                        b"Title" => _serde::__private::Ok(__Field::__field1),
                        b"Author" => _serde::__private::Ok(__Field::__field2),
                        b"PublishDate" => _serde::__private::Ok(__Field::__field3),
                        _ => {
                            let __value = &_serde::__private::from_utf8_lossy(__value);
                            _serde::__private::Err(
                                _serde::de::Error::unknown_variant(__value, VARIANTS),
                            )
                        }
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<BookColumnName>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = BookColumnName;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "enum BookColumnName",
                    )
                }
                fn visit_enum<__A>(
                    self,
                    __data: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::EnumAccess<'de>,
                {
                    match match _serde::de::EnumAccess::variant(__data) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    } {
                        (__Field::__field0, __variant) => {
                            match _serde::de::VariantAccess::unit_variant(__variant) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            };
                            _serde::__private::Ok(BookColumnName::Id)
                        }
                        (__Field::__field1, __variant) => {
                            match _serde::de::VariantAccess::unit_variant(__variant) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            };
                            _serde::__private::Ok(BookColumnName::Title)
                        }
                        (__Field::__field2, __variant) => {
                            match _serde::de::VariantAccess::unit_variant(__variant) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            };
                            _serde::__private::Ok(BookColumnName::Author)
                        }
                        (__Field::__field3, __variant) => {
                            match _serde::de::VariantAccess::unit_variant(__variant) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            };
                            _serde::__private::Ok(BookColumnName::PublishDate)
                        }
                    }
                }
            }
            #[doc(hidden)]
            const VARIANTS: &'static [&'static str] = &[
                "Id",
                "Title",
                "Author",
                "PublishDate",
            ];
            _serde::Deserializer::deserialize_enum(
                __deserializer,
                "BookColumnName",
                VARIANTS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<BookColumnName>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for BookColumnName {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            match *self {
                BookColumnName::Id => {
                    _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "BookColumnName",
                        0u32,
                        "Id",
                    )
                }
                BookColumnName::Title => {
                    _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "BookColumnName",
                        1u32,
                        "Title",
                    )
                }
                BookColumnName::Author => {
                    _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "BookColumnName",
                        2u32,
                        "Author",
                    )
                }
                BookColumnName::PublishDate => {
                    _serde::Serializer::serialize_unit_variant(
                        __serializer,
                        "BookColumnName",
                        3u32,
                        "PublishDate",
                    )
                }
            }
        }
    }
};
/// Generated by leptos-struct-table-macro
pub enum BookColumnValue {
    /// Generated by leptos-struct-table-macro
    Id(Uuid),
    /// Generated by leptos-struct-table-macro
    Title(String),
    /// Generated by leptos-struct-table-macro
    Author(String),
    /// Generated by leptos-struct-table-macro
    PublishDate(DateTime<Utc>),
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for BookColumnValue {}
#[automatically_derived]
impl ::core::cmp::PartialEq for BookColumnValue {
    #[inline]
    fn eq(&self, other: &BookColumnValue) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag
            && match (self, other) {
                (BookColumnValue::Id(__self_0), BookColumnValue::Id(__arg1_0)) => {
                    *__self_0 == *__arg1_0
                }
                (BookColumnValue::Title(__self_0), BookColumnValue::Title(__arg1_0)) => {
                    *__self_0 == *__arg1_0
                }
                (
                    BookColumnValue::Author(__self_0),
                    BookColumnValue::Author(__arg1_0),
                ) => *__self_0 == *__arg1_0,
                (
                    BookColumnValue::PublishDate(__self_0),
                    BookColumnValue::PublishDate(__arg1_0),
                ) => *__self_0 == *__arg1_0,
                _ => unsafe { ::core::intrinsics::unreachable() }
            }
    }
}
impl PartialOrd for BookColumnValue {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        match (self, other) {
            (BookColumnValue::Id(a), BookColumnValue::Id(b)) => a.partial_cmp(b),
            (BookColumnValue::Title(a), BookColumnValue::Title(b)) => a.partial_cmp(b),
            (BookColumnValue::Author(a), BookColumnValue::Author(b)) => a.partial_cmp(b),
            (BookColumnValue::PublishDate(a), BookColumnValue::PublishDate(b)) => {
                a.partial_cmp(b)
            }
            _ => ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
}
impl Book {
    /// Returns the value to the given column name.
    pub fn get(&self, column: BookColumnName) -> BookColumnValue {
        match column {
            BookColumnName::Id => BookColumnValue::Id(self.id.clone()),
            BookColumnName::Title => BookColumnValue::Title(self.title.clone()),
            BookColumnName::Author => BookColumnValue::Author(self.author.clone()),
            BookColumnName::PublishDate => {
                BookColumnValue::PublishDate(self.publish_date.clone())
            }
            _ => ::core::panicking::panic("internal error: entered unreachable code"),
        }
    }
}
impl TableDataColumns for Book {
    type ColumnName = BookColumnName;
}
impl TableDataEntry<Uuid> for Book {
    fn key(&self) -> Uuid {
        self.id.clone()
    }
}
///Props for the [`BookTable`] component.
///
///# Required Props
///- **cx**: [`Scope`]
///- **data_provider**: [`StoredValue<D>`]
///    -  Data storage provider.
///# Optional Props
///- **class**: [`String`]
///    -  Class name of the HTML tag.
///- **range**: [`RwSignal<core::ops::Range<usize>>`]
///    -  Optional range of the data to be shown.
///- **on_row_double_click**: [`std::rc::Rc<dyn Fn(TableRowEvent<Book, Uuid>)>`]
///    -  Will be executed when the user double clicks a row.
///- **current_state**: [`WriteSignal<Vec<Book>>`]
///    -  If given, the current state of the table will be broadcasted here.
///       Listening to this signal can prevent massive requests to the actual data storage.
///- **trigger_refetch**: [`Trigger`]
///    -  If anyone outside this component changes the dataset, this
///       can be used to trigger a refetch of the data.
#[builder(doc)]
pub struct BookTableProps<D>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    /// Class name of the HTML tag.
    #[builder(setter(doc = "**class**: [`String`]\n\n Class name of the HTML tag."))]
    #[builder(default)]
    pub class: String,
    /// Data storage provider.
    #[builder(
        setter(doc = "**data_provider**: [`StoredValue<D>`]\n\n Data storage provider.")
    )]
    #[builder()]
    pub data_provider: StoredValue<D>,
    /// Optional range of the data to be shown.
    #[builder(
        setter(
            doc = "**range**: [`RwSignal<core::ops::Range<usize>>`]\n\n Optional range of the data to be shown."
        )
    )]
    #[builder(default, setter(strip_option))]
    pub range: Option<RwSignal<core::ops::Range<usize>>>,
    /// Will be executed when the user double clicks a row.
    #[builder(
        setter(
            doc = "**on_row_double_click**: [`std::rc::Rc<dyn Fn(TableRowEvent<Book, Uuid>)>`]\n\n Will be executed when the user double clicks a row."
        )
    )]
    #[builder(default, setter(strip_option))]
    pub on_row_double_click: Option<std::rc::Rc<dyn Fn(TableRowEvent<Book, Uuid>)>>,
    /// If given, the current state of the table will be broadcasted here.
    /// Listening to this signal can prevent massive requests to the actual data storage.
    #[builder(
        setter(
            doc = "**current_state**: [`WriteSignal<Vec<Book>>`]\n\n If given, the current state of the table will be broadcasted here.\n Listening to this signal can prevent massive requests to the actual data storage."
        )
    )]
    #[builder(default, setter(strip_option))]
    pub current_state: Option<WriteSignal<Vec<Book>>>,
    /// If anyone outside this component changes the dataset, this
    /// can be used to trigger a refetch of the data.
    #[builder(
        setter(
            doc = "**trigger_refetch**: [`Trigger`]\n\n If anyone outside this component changes the dataset, this\n can be used to trigger a refetch of the data."
        )
    )]
    #[builder(default, setter(strip_option))]
    pub trigger_refetch: Option<Trigger>,
}
impl<D> BookTableProps<D>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    /**
                Create a builder for building `BookTableProps`.
                On the builder, call `.class(...)`(optional), `.data_provider(...)`, `.range(...)`(optional), `.on_row_double_click(...)`(optional), `.current_state(...)`(optional), `.trigger_refetch(...)`(optional) to set the values of the fields.
                Finally, call `.build()` to create the instance of `BookTableProps`.
                */
    #[allow(dead_code, clippy::default_trait_access)]
    pub fn builder() -> BookTablePropsBuilder<D, ((), (), (), (), (), ())> {
        BookTablePropsBuilder {
            fields: ((), (), (), (), (), ()),
            phantom: ::core::default::Default::default(),
        }
    }
}
#[must_use]
/**Builder for [`BookTableProps`] instances.

See [`BookTableProps::builder()`] for more info.*/
#[allow(dead_code, non_camel_case_types, non_snake_case)]
pub struct BookTablePropsBuilder<D, TypedBuilderFields = ((), (), (), (), (), ())> {
    fields: TypedBuilderFields,
    phantom: (::core::marker::PhantomData<D>),
}
impl<D, TypedBuilderFields> Clone for BookTablePropsBuilder<D, TypedBuilderFields>
where
    TypedBuilderFields: Clone,
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[allow(clippy::default_trait_access)]
    fn clone(&self) -> Self {
        Self {
            fields: self.fields.clone(),
            phantom: ::core::default::Default::default(),
        }
    }
}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, non_snake_case)]
pub trait BookTablePropsBuilder_Optional<T> {
    fn into_value<F: FnOnce() -> T>(self, default: F) -> T;
}
impl<T> BookTablePropsBuilder_Optional<T> for () {
    fn into_value<F: FnOnce() -> T>(self, default: F) -> T {
        default()
    }
}
impl<T> BookTablePropsBuilder_Optional<T> for (T,) {
    fn into_value<F: FnOnce() -> T>(self, _: F) -> T {
        self.0
    }
}
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __data_provider,
    __range,
    __on_row_double_click,
    __current_state,
    __trigger_refetch,
> BookTablePropsBuilder<
    D,
    (
        (),
        __data_provider,
        __range,
        __on_row_double_click,
        __current_state,
        __trigger_refetch,
    ),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[doc = "**class**: [`String`]\n\n Class name of the HTML tag."]
    pub fn class(
        self,
        class: String,
    ) -> BookTablePropsBuilder<
        D,
        (
            (String,),
            __data_provider,
            __range,
            __on_row_double_click,
            __current_state,
            __trigger_refetch,
        ),
    > {
        let class = (class,);
        let (
            _,
            data_provider,
            range,
            on_row_double_click,
            current_state,
            trigger_refetch,
        ) = self.fields;
        BookTablePropsBuilder {
            fields: (
                class,
                data_provider,
                range,
                on_row_double_click,
                current_state,
                trigger_refetch,
            ),
            phantom: self.phantom,
        }
    }
}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, non_snake_case)]
pub enum BookTablePropsBuilder_Error_Repeated_field_class {}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __data_provider,
    __range,
    __on_row_double_click,
    __current_state,
    __trigger_refetch,
> BookTablePropsBuilder<
    D,
    (
        (String,),
        __data_provider,
        __range,
        __on_row_double_click,
        __current_state,
        __trigger_refetch,
    ),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[deprecated(note = "Repeated field class")]
    pub fn class(
        self,
        _: BookTablePropsBuilder_Error_Repeated_field_class,
    ) -> BookTablePropsBuilder<
        D,
        (
            (String,),
            __data_provider,
            __range,
            __on_row_double_click,
            __current_state,
            __trigger_refetch,
        ),
    > {
        self
    }
}
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __class,
    __range,
    __on_row_double_click,
    __current_state,
    __trigger_refetch,
> BookTablePropsBuilder<
    D,
    (__class, (), __range, __on_row_double_click, __current_state, __trigger_refetch),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[doc = "**data_provider**: [`StoredValue<D>`]\n\n Data storage provider."]
    pub fn data_provider(
        self,
        data_provider: StoredValue<D>,
    ) -> BookTablePropsBuilder<
        D,
        (
            __class,
            (StoredValue<D>,),
            __range,
            __on_row_double_click,
            __current_state,
            __trigger_refetch,
        ),
    > {
        let data_provider = (data_provider,);
        let (class, _, range, on_row_double_click, current_state, trigger_refetch) = self
            .fields;
        BookTablePropsBuilder {
            fields: (
                class,
                data_provider,
                range,
                on_row_double_click,
                current_state,
                trigger_refetch,
            ),
            phantom: self.phantom,
        }
    }
}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, non_snake_case)]
pub enum BookTablePropsBuilder_Error_Repeated_field_data_provider {}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __class,
    __range,
    __on_row_double_click,
    __current_state,
    __trigger_refetch,
> BookTablePropsBuilder<
    D,
    (
        __class,
        (StoredValue<D>,),
        __range,
        __on_row_double_click,
        __current_state,
        __trigger_refetch,
    ),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[deprecated(note = "Repeated field data_provider")]
    pub fn data_provider(
        self,
        _: BookTablePropsBuilder_Error_Repeated_field_data_provider,
    ) -> BookTablePropsBuilder<
        D,
        (
            __class,
            (StoredValue<D>,),
            __range,
            __on_row_double_click,
            __current_state,
            __trigger_refetch,
        ),
    > {
        self
    }
}
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __class,
    __data_provider,
    __on_row_double_click,
    __current_state,
    __trigger_refetch,
> BookTablePropsBuilder<
    D,
    (
        __class,
        __data_provider,
        (),
        __on_row_double_click,
        __current_state,
        __trigger_refetch,
    ),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[doc = "**range**: [`RwSignal<core::ops::Range<usize>>`]\n\n Optional range of the data to be shown."]
    pub fn range(
        self,
        range: RwSignal<core::ops::Range<usize>>,
    ) -> BookTablePropsBuilder<
        D,
        (
            __class,
            __data_provider,
            (Option<RwSignal<core::ops::Range<usize>>>,),
            __on_row_double_click,
            __current_state,
            __trigger_refetch,
        ),
    > {
        let range = (Some(range),);
        let (
            class,
            data_provider,
            _,
            on_row_double_click,
            current_state,
            trigger_refetch,
        ) = self.fields;
        BookTablePropsBuilder {
            fields: (
                class,
                data_provider,
                range,
                on_row_double_click,
                current_state,
                trigger_refetch,
            ),
            phantom: self.phantom,
        }
    }
}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, non_snake_case)]
pub enum BookTablePropsBuilder_Error_Repeated_field_range {}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __class,
    __data_provider,
    __on_row_double_click,
    __current_state,
    __trigger_refetch,
> BookTablePropsBuilder<
    D,
    (
        __class,
        __data_provider,
        (Option<RwSignal<core::ops::Range<usize>>>,),
        __on_row_double_click,
        __current_state,
        __trigger_refetch,
    ),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[deprecated(note = "Repeated field range")]
    pub fn range(
        self,
        _: BookTablePropsBuilder_Error_Repeated_field_range,
    ) -> BookTablePropsBuilder<
        D,
        (
            __class,
            __data_provider,
            (Option<RwSignal<core::ops::Range<usize>>>,),
            __on_row_double_click,
            __current_state,
            __trigger_refetch,
        ),
    > {
        self
    }
}
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __class,
    __data_provider,
    __range,
    __current_state,
    __trigger_refetch,
> BookTablePropsBuilder<
    D,
    (__class, __data_provider, __range, (), __current_state, __trigger_refetch),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[doc = "**on_row_double_click**: [`std::rc::Rc<dyn Fn(TableRowEvent<Book, Uuid>)>`]\n\n Will be executed when the user double clicks a row."]
    pub fn on_row_double_click(
        self,
        on_row_double_click: std::rc::Rc<dyn Fn(TableRowEvent<Book, Uuid>)>,
    ) -> BookTablePropsBuilder<
        D,
        (
            __class,
            __data_provider,
            __range,
            (Option<std::rc::Rc<dyn Fn(TableRowEvent<Book, Uuid>)>>,),
            __current_state,
            __trigger_refetch,
        ),
    > {
        let on_row_double_click = (Some(on_row_double_click),);
        let (class, data_provider, range, _, current_state, trigger_refetch) = self
            .fields;
        BookTablePropsBuilder {
            fields: (
                class,
                data_provider,
                range,
                on_row_double_click,
                current_state,
                trigger_refetch,
            ),
            phantom: self.phantom,
        }
    }
}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, non_snake_case)]
pub enum BookTablePropsBuilder_Error_Repeated_field_on_row_double_click {}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __class,
    __data_provider,
    __range,
    __current_state,
    __trigger_refetch,
> BookTablePropsBuilder<
    D,
    (
        __class,
        __data_provider,
        __range,
        (Option<std::rc::Rc<dyn Fn(TableRowEvent<Book, Uuid>)>>,),
        __current_state,
        __trigger_refetch,
    ),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[deprecated(note = "Repeated field on_row_double_click")]
    pub fn on_row_double_click(
        self,
        _: BookTablePropsBuilder_Error_Repeated_field_on_row_double_click,
    ) -> BookTablePropsBuilder<
        D,
        (
            __class,
            __data_provider,
            __range,
            (Option<std::rc::Rc<dyn Fn(TableRowEvent<Book, Uuid>)>>,),
            __current_state,
            __trigger_refetch,
        ),
    > {
        self
    }
}
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __class,
    __data_provider,
    __range,
    __on_row_double_click,
    __trigger_refetch,
> BookTablePropsBuilder<
    D,
    (__class, __data_provider, __range, __on_row_double_click, (), __trigger_refetch),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[doc = "**current_state**: [`WriteSignal<Vec<Book>>`]\n\n If given, the current state of the table will be broadcasted here.\n Listening to this signal can prevent massive requests to the actual data storage."]
    pub fn current_state(
        self,
        current_state: WriteSignal<Vec<Book>>,
    ) -> BookTablePropsBuilder<
        D,
        (
            __class,
            __data_provider,
            __range,
            __on_row_double_click,
            (Option<WriteSignal<Vec<Book>>>,),
            __trigger_refetch,
        ),
    > {
        let current_state = (Some(current_state),);
        let (class, data_provider, range, on_row_double_click, _, trigger_refetch) = self
            .fields;
        BookTablePropsBuilder {
            fields: (
                class,
                data_provider,
                range,
                on_row_double_click,
                current_state,
                trigger_refetch,
            ),
            phantom: self.phantom,
        }
    }
}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, non_snake_case)]
pub enum BookTablePropsBuilder_Error_Repeated_field_current_state {}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __class,
    __data_provider,
    __range,
    __on_row_double_click,
    __trigger_refetch,
> BookTablePropsBuilder<
    D,
    (
        __class,
        __data_provider,
        __range,
        __on_row_double_click,
        (Option<WriteSignal<Vec<Book>>>,),
        __trigger_refetch,
    ),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[deprecated(note = "Repeated field current_state")]
    pub fn current_state(
        self,
        _: BookTablePropsBuilder_Error_Repeated_field_current_state,
    ) -> BookTablePropsBuilder<
        D,
        (
            __class,
            __data_provider,
            __range,
            __on_row_double_click,
            (Option<WriteSignal<Vec<Book>>>,),
            __trigger_refetch,
        ),
    > {
        self
    }
}
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __class,
    __data_provider,
    __range,
    __on_row_double_click,
    __current_state,
> BookTablePropsBuilder<
    D,
    (__class, __data_provider, __range, __on_row_double_click, __current_state, ()),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[doc = "**trigger_refetch**: [`Trigger`]\n\n If anyone outside this component changes the dataset, this\n can be used to trigger a refetch of the data."]
    pub fn trigger_refetch(
        self,
        trigger_refetch: Trigger,
    ) -> BookTablePropsBuilder<
        D,
        (
            __class,
            __data_provider,
            __range,
            __on_row_double_click,
            __current_state,
            (Option<Trigger>,),
        ),
    > {
        let trigger_refetch = (Some(trigger_refetch),);
        let (class, data_provider, range, on_row_double_click, current_state, _) = self
            .fields;
        BookTablePropsBuilder {
            fields: (
                class,
                data_provider,
                range,
                on_row_double_click,
                current_state,
                trigger_refetch,
            ),
            phantom: self.phantom,
        }
    }
}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, non_snake_case)]
pub enum BookTablePropsBuilder_Error_Repeated_field_trigger_refetch {}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __class,
    __data_provider,
    __range,
    __on_row_double_click,
    __current_state,
> BookTablePropsBuilder<
    D,
    (
        __class,
        __data_provider,
        __range,
        __on_row_double_click,
        __current_state,
        (Option<Trigger>,),
    ),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[deprecated(note = "Repeated field trigger_refetch")]
    pub fn trigger_refetch(
        self,
        _: BookTablePropsBuilder_Error_Repeated_field_trigger_refetch,
    ) -> BookTablePropsBuilder<
        D,
        (
            __class,
            __data_provider,
            __range,
            __on_row_double_click,
            __current_state,
            (Option<Trigger>,),
        ),
    > {
        self
    }
}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, non_snake_case)]
pub enum BookTablePropsBuilder_Error_Missing_required_field_data_provider {}
#[doc(hidden)]
#[allow(dead_code, non_camel_case_types, missing_docs, clippy::panic)]
impl<
    D,
    __class,
    __range,
    __on_row_double_click,
    __current_state,
    __trigger_refetch,
> BookTablePropsBuilder<
    D,
    (__class, (), __range, __on_row_double_click, __current_state, __trigger_refetch),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[deprecated(note = "Missing required field data_provider")]
    pub fn build(
        self,
        _: BookTablePropsBuilder_Error_Missing_required_field_data_provider,
    ) -> BookTableProps<D> {
        { ::std::rt::begin_panic("explicit panic") };
    }
}
#[allow(dead_code, non_camel_case_types, missing_docs)]
impl<
    D,
    __class: BookTablePropsBuilder_Optional<String>,
    __range: BookTablePropsBuilder_Optional<Option<RwSignal<core::ops::Range<usize>>>>,
    __on_row_double_click: BookTablePropsBuilder_Optional<
            Option<std::rc::Rc<dyn Fn(TableRowEvent<Book, Uuid>)>>,
        >,
    __current_state: BookTablePropsBuilder_Optional<Option<WriteSignal<Vec<Book>>>>,
    __trigger_refetch: BookTablePropsBuilder_Optional<Option<Trigger>>,
> BookTablePropsBuilder<
    D,
    (
        __class,
        (StoredValue<D>,),
        __range,
        __on_row_double_click,
        __current_state,
        __trigger_refetch,
    ),
>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    ///Finalise the builder and create its [`BookTableProps`] instance
    #[allow(clippy::default_trait_access)]
    pub fn build(self) -> BookTableProps<D> {
        let (
            class,
            data_provider,
            range,
            on_row_double_click,
            current_state,
            trigger_refetch,
        ) = self.fields;
        let class = BookTablePropsBuilder_Optional::into_value(
            class,
            || ::core::default::Default::default(),
        );
        let data_provider = data_provider.0;
        let range = BookTablePropsBuilder_Optional::into_value(
            range,
            || ::core::default::Default::default(),
        );
        let on_row_double_click = BookTablePropsBuilder_Optional::into_value(
            on_row_double_click,
            || ::core::default::Default::default(),
        );
        let current_state = BookTablePropsBuilder_Optional::into_value(
            current_state,
            || ::core::default::Default::default(),
        );
        let trigger_refetch = BookTablePropsBuilder_Optional::into_value(
            trigger_refetch,
            || ::core::default::Default::default(),
        );
        BookTableProps {
            class,
            data_provider,
            range,
            on_row_double_click,
            current_state,
            trigger_refetch,
        }
            .into()
    }
}
impl<D> ::leptos::Props for BookTableProps<D>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    type Builder = BookTablePropsBuilder<D>;
    fn builder() -> Self::Builder {
        BookTableProps::builder()
    }
}
impl<D> ::leptos::IntoView for BookTableProps<D>
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    fn into_view(self, cx: ::leptos::Scope) -> ::leptos::View {
        BookTable(cx, self).into_view(cx)
    }
}
///# Required Props
///- **cx**: [`Scope`]
///- **data_provider**: [`StoredValue<D>`]
///    -  Data storage provider.
///# Optional Props
///- **class**: [`String`]
///    -  Class name of the HTML tag.
///- **range**: [`RwSignal<core::ops::Range<usize>>`]
///    -  Optional range of the data to be shown.
///- **on_row_double_click**: [`std::rc::Rc<dyn Fn(TableRowEvent<Book, Uuid>)>`]
///    -  Will be executed when the user double clicks a row.
///- **current_state**: [`WriteSignal<Vec<Book>>`]
///    -  If given, the current state of the table will be broadcasted here.
///       Listening to this signal can prevent massive requests to the actual data storage.
///- **trigger_refetch**: [`Trigger`]
///    -  If anyone outside this component changes the dataset, this
///       can be used to trigger a refetch of the data.
#[allow(non_snake_case, clippy::too_many_arguments)]
pub fn BookTable<D>(
    #[allow(unused_variables)]
    cx: ::leptos::Scope,
    props: BookTableProps<D>,
) -> impl IntoView
where
    D: TableDataProvider<Book, Uuid> + 'static,
{
    #[allow(non_snake_case)]
    pub fn __BookTable<D>(
        cx: Scope,
        class: String,
        data_provider: StoredValue<D>,
        range: Option<RwSignal<core::ops::Range<usize>>>,
        on_row_double_click: Option<std::rc::Rc<dyn Fn(TableRowEvent<Book, Uuid>)>>,
        current_state: Option<WriteSignal<Vec<Book>>>,
        trigger_refetch: Option<Trigger>,
    ) -> impl IntoView
    where
        D: TableDataProvider<Book, Uuid> + 'static,
    {
        let class_provider = BookTableClassesProvider::new();
        let (range, set_range) = if let Some(r) = range {
            r.split()
        } else {
            create_signal(cx, 0..1000)
        };
        let on_row_select = move |event: TableRowEvent<Book, Uuid>| {};
        let (sorting, set_sorting) = create_signal(
            cx,
            std::collections::VecDeque::<(BookColumnName, ColumnSort)>::new(),
        );
        let on_head_click = move |event: TableHeadEvent<BookColumnName>| {
            set_sorting
                .update(move |sorting| {
                    let (i, (_, mut sort)) = sorting
                        .iter()
                        .enumerate()
                        .find(|(_, (column, _))| column == &event.column)
                        .unwrap_or((0, &(event.column, ColumnSort::None)));
                    if i == 0 || sort == ColumnSort::None {
                        sort = match sort {
                            ColumnSort::None => ColumnSort::Ascending,
                            ColumnSort::Ascending => ColumnSort::Descending,
                            ColumnSort::Descending => ColumnSort::None,
                        };
                    }
                    *sorting = sorting
                        .clone()
                        .into_iter()
                        .filter(|(column, sort)| {
                            *column != event.column && *sort != ColumnSort::None
                        })
                        .collect();
                    if sort != ColumnSort::None {
                        sorting.push_front((event.column, sort));
                    }
                });
        };
        let action_set_row = create_action(
            cx,
            move |(key, row): &(Uuid, Book)| {
                let mut provider = data_provider.get_value();
                let row = row.clone();
                let key = key.clone();
                async move { provider.set_row(key, row).await }
            },
        );
        let sort = sorting.clone();
        let column_sort = move |name_variant: BookColumnName| {
            sort.get()
                .into_iter()
                .find(|(field, _)| *field == name_variant)
                .map(|(_, sort)| sort)
                .unwrap_or(ColumnSort::None)
        };
        let on_dbl_click = match on_row_double_click.clone() {
            Some(f) => f,
            None => std::rc::Rc::new(move |_| {}),
        };
        let local_items_state = create_rw_signal(cx, None::<Vec<Book>>);
        let fetched_items = create_local_resource(
            cx,
            move || range.get(),
            move |range| {
                let provider = data_provider.get_value();
                async move {
                    let rows = match provider.get_rows(range.clone()).await {
                        Ok(r) => r,
                        Err(e) => {
                            {
                                let lvl = ::log::Level::Error;
                                if lvl <= ::log::STATIC_MAX_LEVEL
                                    && lvl <= ::log::max_level()
                                {
                                    ::log::__private_api_log(
                                        format_args!("Could not get rows: {0}", e),
                                        lvl,
                                        &("simple", "simple", "src/main.rs", 12u32),
                                        ::log::__private_api::Option::None,
                                    );
                                }
                            };
                            return ::alloc::vec::Vec::new();
                        }
                    };
                    rows
                }
            },
        );
        let memo_update_local_items_state = move || {
            local_items_state.set(fetched_items.read(cx));
        };
        let broadcast_local_items_state = create_memo(
            cx,
            move |_| {
                if let Some(signal) = current_state {
                    let items = match local_items_state.get() {
                        Some(it) => it,
                        None => return,
                    };
                    signal.set(items);
                }
            },
        );
        let memo_items = create_memo(
            cx,
            move |_| {
                let sort = sorting.get();
                local_items_state
                    .with(|items| {
                        if let Some(it) = items {
                            let mut sorted_items = it.clone();
                            sorted_items.set_sorting(&sort);
                            Some(sorted_items)
                        } else {
                            None
                        }
                    })
            },
        );
        let refetch_data_on_trigger = move || {
            trigger_refetch.map(|t| t.track());
            fetched_items.refetch();
        };
        {
            {
                leptos::Fragment::lazy(|| {
                    [
                        { memo_update_local_items_state }.into_view(cx),
                        {
                            let _ = leptos::leptos_dom::html::table;
                            leptos::leptos_dom::html::table(cx)
                                .attr("class", (cx, class_provider.table(&class)))
                                .child((
                                    cx,
                                    {
                                        let _ = leptos::leptos_dom::html::thead;
                                        leptos::leptos_dom::html::thead(cx)
                                            .child((
                                                cx,
                                                {
                                                    let _ = leptos::leptos_dom::html::tr;
                                                    leptos::leptos_dom::html::tr(cx)
                                                        .attr("class", (cx, class_provider.head_row("")))
                                                        .child((
                                                            cx,
                                                            if false {
                                                                #[allow(unreachable_code)]
                                                                ::leptos::component_view(
                                                                    &DefaultTableHeaderRenderer,
                                                                    cx,
                                                                    ::leptos::component_props_builder(
                                                                            &DefaultTableHeaderRenderer,
                                                                        )
                                                                        .class(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    class_provider
                                                                                        .clone()
                                                                                        .head_cell(column_sort.clone()(BookColumnName::Id), "")
                                                                                },
                                                                            ),
                                                                        )
                                                                        .inner_class(
                                                                            #[allow(unused_braces)]
                                                                            class_provider.clone().head_cell_inner(),
                                                                        )
                                                                        .index(#[allow(unused_braces)] 0usize)
                                                                        .column(#[allow(unused_braces)] BookColumnName::Id)
                                                                        .sort_priority(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    if sorting.get().len() < 2 {
                                                                                        return None;
                                                                                    }
                                                                                    sorting
                                                                                        .get()
                                                                                        .iter()
                                                                                        .position(|(field, _)| *field == BookColumnName::Id)
                                                                                },
                                                                            ),
                                                                        )
                                                                        .sort_direction(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || column_sort.clone()(BookColumnName::Id),
                                                                            ),
                                                                        )
                                                                        .on_click(#[allow(unused_braces)] on_head_click.clone())
                                                                        .children({
                                                                            Box::new(move |cx| {
                                                                                {
                                                                                    leptos::Fragment::lazy(|| {
                                                                                        [leptos::leptos_dom::html::text("Id").into_view(cx)]
                                                                                            .to_vec()
                                                                                    })
                                                                                }
                                                                                    .with_view_marker("<DefaultTableHeaderRenderer/>-children")
                                                                            })
                                                                        })
                                                                        .build(),
                                                                )
                                                            } else {
                                                                ::leptos::component_view(
                                                                    &DefaultTableHeaderRenderer,
                                                                    cx,
                                                                    ::leptos::component_props_builder(
                                                                            &DefaultTableHeaderRenderer,
                                                                        )
                                                                        .class(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    class_provider
                                                                                        .clone()
                                                                                        .head_cell(column_sort.clone()(BookColumnName::Id), "")
                                                                                },
                                                                            ),
                                                                        )
                                                                        .inner_class(
                                                                            #[allow(unused_braces)]
                                                                            class_provider.clone().head_cell_inner(),
                                                                        )
                                                                        .index(#[allow(unused_braces)] 0usize)
                                                                        .column(#[allow(unused_braces)] BookColumnName::Id)
                                                                        .sort_priority(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    if sorting.get().len() < 2 {
                                                                                        return None;
                                                                                    }
                                                                                    sorting
                                                                                        .get()
                                                                                        .iter()
                                                                                        .position(|(field, _)| *field == BookColumnName::Id)
                                                                                },
                                                                            ),
                                                                        )
                                                                        .sort_direction(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || column_sort.clone()(BookColumnName::Id),
                                                                            ),
                                                                        )
                                                                        .on_click(#[allow(unused_braces)] on_head_click.clone())
                                                                        .children({
                                                                            Box::new(move |cx| {
                                                                                {
                                                                                    leptos::Fragment::lazy(|| {
                                                                                        [leptos::leptos_dom::html::text("Id").into_view(cx)]
                                                                                            .to_vec()
                                                                                    })
                                                                                }
                                                                                    .with_view_marker("<DefaultTableHeaderRenderer/>-children")
                                                                            })
                                                                        })
                                                                        .build(),
                                                                )
                                                            },
                                                        ))
                                                        .child((
                                                            cx,
                                                            if false {
                                                                #[allow(unreachable_code)]
                                                                ::leptos::component_view(
                                                                    &DefaultTableHeaderRenderer,
                                                                    cx,
                                                                    ::leptos::component_props_builder(
                                                                            &DefaultTableHeaderRenderer,
                                                                        )
                                                                        .class(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    class_provider
                                                                                        .clone()
                                                                                        .head_cell(column_sort.clone()(BookColumnName::Title), "")
                                                                                },
                                                                            ),
                                                                        )
                                                                        .inner_class(
                                                                            #[allow(unused_braces)]
                                                                            class_provider.clone().head_cell_inner(),
                                                                        )
                                                                        .index(#[allow(unused_braces)] 1usize)
                                                                        .column(#[allow(unused_braces)] BookColumnName::Title)
                                                                        .sort_priority(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    if sorting.get().len() < 2 {
                                                                                        return None;
                                                                                    }
                                                                                    sorting
                                                                                        .get()
                                                                                        .iter()
                                                                                        .position(|(field, _)| *field == BookColumnName::Title)
                                                                                },
                                                                            ),
                                                                        )
                                                                        .sort_direction(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || column_sort.clone()(BookColumnName::Title),
                                                                            ),
                                                                        )
                                                                        .on_click(#[allow(unused_braces)] on_head_click.clone())
                                                                        .children({
                                                                            Box::new(move |cx| {
                                                                                {
                                                                                    leptos::Fragment::lazy(|| {
                                                                                        [leptos::leptos_dom::html::text("Title").into_view(cx)]
                                                                                            .to_vec()
                                                                                    })
                                                                                }
                                                                                    .with_view_marker("<DefaultTableHeaderRenderer/>-children")
                                                                            })
                                                                        })
                                                                        .build(),
                                                                )
                                                            } else {
                                                                ::leptos::component_view(
                                                                    &DefaultTableHeaderRenderer,
                                                                    cx,
                                                                    ::leptos::component_props_builder(
                                                                            &DefaultTableHeaderRenderer,
                                                                        )
                                                                        .class(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    class_provider
                                                                                        .clone()
                                                                                        .head_cell(column_sort.clone()(BookColumnName::Title), "")
                                                                                },
                                                                            ),
                                                                        )
                                                                        .inner_class(
                                                                            #[allow(unused_braces)]
                                                                            class_provider.clone().head_cell_inner(),
                                                                        )
                                                                        .index(#[allow(unused_braces)] 1usize)
                                                                        .column(#[allow(unused_braces)] BookColumnName::Title)
                                                                        .sort_priority(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    if sorting.get().len() < 2 {
                                                                                        return None;
                                                                                    }
                                                                                    sorting
                                                                                        .get()
                                                                                        .iter()
                                                                                        .position(|(field, _)| *field == BookColumnName::Title)
                                                                                },
                                                                            ),
                                                                        )
                                                                        .sort_direction(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || column_sort.clone()(BookColumnName::Title),
                                                                            ),
                                                                        )
                                                                        .on_click(#[allow(unused_braces)] on_head_click.clone())
                                                                        .children({
                                                                            Box::new(move |cx| {
                                                                                {
                                                                                    leptos::Fragment::lazy(|| {
                                                                                        [leptos::leptos_dom::html::text("Title").into_view(cx)]
                                                                                            .to_vec()
                                                                                    })
                                                                                }
                                                                                    .with_view_marker("<DefaultTableHeaderRenderer/>-children")
                                                                            })
                                                                        })
                                                                        .build(),
                                                                )
                                                            },
                                                        ))
                                                        .child((
                                                            cx,
                                                            if false {
                                                                #[allow(unreachable_code)]
                                                                ::leptos::component_view(
                                                                    &DefaultTableHeaderRenderer,
                                                                    cx,
                                                                    ::leptos::component_props_builder(
                                                                            &DefaultTableHeaderRenderer,
                                                                        )
                                                                        .class(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    class_provider
                                                                                        .clone()
                                                                                        .head_cell(column_sort.clone()(BookColumnName::Author), "")
                                                                                },
                                                                            ),
                                                                        )
                                                                        .inner_class(
                                                                            #[allow(unused_braces)]
                                                                            class_provider.clone().head_cell_inner(),
                                                                        )
                                                                        .index(#[allow(unused_braces)] 2usize)
                                                                        .column(#[allow(unused_braces)] BookColumnName::Author)
                                                                        .sort_priority(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    if sorting.get().len() < 2 {
                                                                                        return None;
                                                                                    }
                                                                                    sorting
                                                                                        .get()
                                                                                        .iter()
                                                                                        .position(|(field, _)| *field == BookColumnName::Author)
                                                                                },
                                                                            ),
                                                                        )
                                                                        .sort_direction(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || column_sort.clone()(BookColumnName::Author),
                                                                            ),
                                                                        )
                                                                        .on_click(#[allow(unused_braces)] on_head_click.clone())
                                                                        .children({
                                                                            Box::new(move |cx| {
                                                                                {
                                                                                    leptos::Fragment::lazy(|| {
                                                                                        [leptos::leptos_dom::html::text("Author").into_view(cx)]
                                                                                            .to_vec()
                                                                                    })
                                                                                }
                                                                                    .with_view_marker("<DefaultTableHeaderRenderer/>-children")
                                                                            })
                                                                        })
                                                                        .build(),
                                                                )
                                                            } else {
                                                                ::leptos::component_view(
                                                                    &DefaultTableHeaderRenderer,
                                                                    cx,
                                                                    ::leptos::component_props_builder(
                                                                            &DefaultTableHeaderRenderer,
                                                                        )
                                                                        .class(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    class_provider
                                                                                        .clone()
                                                                                        .head_cell(column_sort.clone()(BookColumnName::Author), "")
                                                                                },
                                                                            ),
                                                                        )
                                                                        .inner_class(
                                                                            #[allow(unused_braces)]
                                                                            class_provider.clone().head_cell_inner(),
                                                                        )
                                                                        .index(#[allow(unused_braces)] 2usize)
                                                                        .column(#[allow(unused_braces)] BookColumnName::Author)
                                                                        .sort_priority(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    if sorting.get().len() < 2 {
                                                                                        return None;
                                                                                    }
                                                                                    sorting
                                                                                        .get()
                                                                                        .iter()
                                                                                        .position(|(field, _)| *field == BookColumnName::Author)
                                                                                },
                                                                            ),
                                                                        )
                                                                        .sort_direction(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || column_sort.clone()(BookColumnName::Author),
                                                                            ),
                                                                        )
                                                                        .on_click(#[allow(unused_braces)] on_head_click.clone())
                                                                        .children({
                                                                            Box::new(move |cx| {
                                                                                {
                                                                                    leptos::Fragment::lazy(|| {
                                                                                        [leptos::leptos_dom::html::text("Author").into_view(cx)]
                                                                                            .to_vec()
                                                                                    })
                                                                                }
                                                                                    .with_view_marker("<DefaultTableHeaderRenderer/>-children")
                                                                            })
                                                                        })
                                                                        .build(),
                                                                )
                                                            },
                                                        ))
                                                        .child((
                                                            cx,
                                                            if false {
                                                                #[allow(unreachable_code)]
                                                                ::leptos::component_view(
                                                                    &DefaultTableHeaderRenderer,
                                                                    cx,
                                                                    ::leptos::component_props_builder(
                                                                            &DefaultTableHeaderRenderer,
                                                                        )
                                                                        .class(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    class_provider
                                                                                        .clone()
                                                                                        .head_cell(
                                                                                            column_sort.clone()(BookColumnName::PublishDate),
                                                                                            "",
                                                                                        )
                                                                                },
                                                                            ),
                                                                        )
                                                                        .inner_class(
                                                                            #[allow(unused_braces)]
                                                                            class_provider.clone().head_cell_inner(),
                                                                        )
                                                                        .index(#[allow(unused_braces)] 3usize)
                                                                        .column(#[allow(unused_braces)] BookColumnName::PublishDate)
                                                                        .sort_priority(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    if sorting.get().len() < 2 {
                                                                                        return None;
                                                                                    }
                                                                                    sorting
                                                                                        .get()
                                                                                        .iter()
                                                                                        .position(|(field, _)| {
                                                                                            *field == BookColumnName::PublishDate
                                                                                        })
                                                                                },
                                                                            ),
                                                                        )
                                                                        .sort_direction(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || column_sort.clone()(BookColumnName::PublishDate),
                                                                            ),
                                                                        )
                                                                        .on_click(#[allow(unused_braces)] on_head_click.clone())
                                                                        .children({
                                                                            Box::new(move |cx| {
                                                                                {
                                                                                    leptos::Fragment::lazy(|| {
                                                                                        [
                                                                                            leptos::leptos_dom::html::text("Publish Date").into_view(cx),
                                                                                        ]
                                                                                            .to_vec()
                                                                                    })
                                                                                }
                                                                                    .with_view_marker("<DefaultTableHeaderRenderer/>-children")
                                                                            })
                                                                        })
                                                                        .build(),
                                                                )
                                                            } else {
                                                                ::leptos::component_view(
                                                                    &DefaultTableHeaderRenderer,
                                                                    cx,
                                                                    ::leptos::component_props_builder(
                                                                            &DefaultTableHeaderRenderer,
                                                                        )
                                                                        .class(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    class_provider
                                                                                        .clone()
                                                                                        .head_cell(
                                                                                            column_sort.clone()(BookColumnName::PublishDate),
                                                                                            "",
                                                                                        )
                                                                                },
                                                                            ),
                                                                        )
                                                                        .inner_class(
                                                                            #[allow(unused_braces)]
                                                                            class_provider.clone().head_cell_inner(),
                                                                        )
                                                                        .index(#[allow(unused_braces)] 3usize)
                                                                        .column(#[allow(unused_braces)] BookColumnName::PublishDate)
                                                                        .sort_priority(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || {
                                                                                    if sorting.get().len() < 2 {
                                                                                        return None;
                                                                                    }
                                                                                    sorting
                                                                                        .get()
                                                                                        .iter()
                                                                                        .position(|(field, _)| {
                                                                                            *field == BookColumnName::PublishDate
                                                                                        })
                                                                                },
                                                                            ),
                                                                        )
                                                                        .sort_direction(
                                                                            #[allow(unused_braces)]
                                                                            Signal::derive(
                                                                                cx,
                                                                                move || column_sort.clone()(BookColumnName::PublishDate),
                                                                            ),
                                                                        )
                                                                        .on_click(#[allow(unused_braces)] on_head_click.clone())
                                                                        .children({
                                                                            Box::new(move |cx| {
                                                                                {
                                                                                    leptos::Fragment::lazy(|| {
                                                                                        [
                                                                                            leptos::leptos_dom::html::text("Publish Date").into_view(cx),
                                                                                        ]
                                                                                            .to_vec()
                                                                                    })
                                                                                }
                                                                                    .with_view_marker("<DefaultTableHeaderRenderer/>-children")
                                                                            })
                                                                        })
                                                                        .build(),
                                                                )
                                                            },
                                                        ))
                                                },
                                            ))
                                    },
                                ))
                                .child((
                                    cx,
                                    {
                                        let _ = leptos::leptos_dom::html::tbody;
                                        leptos::leptos_dom::html::tbody(cx)
                                            .child((
                                                cx,
                                                if false {
                                                    #[allow(unreachable_code)]
                                                    ::leptos::component_view(
                                                        &Transition,
                                                        cx,
                                                        ::leptos::component_props_builder(&Transition)
                                                            .fallback(
                                                                #[allow(unused_braces)]
                                                                move || {
                                                                    {
                                                                        let _ = leptos::leptos_dom::html::tr;
                                                                        leptos::leptos_dom::html::tr(cx)
                                                                            .child((
                                                                                cx,
                                                                                {
                                                                                    let _ = leptos::leptos_dom::html::td;
                                                                                    leptos::leptos_dom::html::td(cx)
                                                                                        .attr("colspan", (cx, "4"))
                                                                                        .child("Loading...!")
                                                                                },
                                                                            ))
                                                                    }
                                                                },
                                                            )
                                                            .children({
                                                                Box::new(move |cx| {
                                                                    {
                                                                        leptos::Fragment::lazy(|| {
                                                                            [
                                                                                {
                                                                                    let on_dbl_click = on_dbl_click.clone();
                                                                                    move || {
                                                                                        let is_selected = |_| false;
                                                                                        let on_dbl_click = on_dbl_click.clone();
                                                                                        let items = memo_items.get();
                                                                                        items
                                                                                            .map(move |items| {
                                                                                                let items = items
                                                                                                    .into_iter()
                                                                                                    .enumerate()
                                                                                                    .collect::<Vec<_>>();
                                                                                                let on_dbl_click = on_dbl_click.clone();
                                                                                                {
                                                                                                    ::leptos::component_view(
                                                                                                        &For,
                                                                                                        cx,
                                                                                                        ::leptos::component_props_builder(&For)
                                                                                                            .each(#[allow(unused_braces)] move || items.clone())
                                                                                                            .key(#[allow(unused_braces)] |(_, item)| item.id.clone())
                                                                                                            .view(
                                                                                                                #[allow(unused_braces)]
                                                                                                                move |cx, (i, item)| {
                                                                                                                    let on_dbl_click = on_dbl_click.clone();
                                                                                                                    let is_sel = is_selected.clone();
                                                                                                                    let class_signal = Signal::derive(
                                                                                                                        cx,
                                                                                                                        move || {
                                                                                                                            class_provider
                                                                                                                                .clone()
                                                                                                                                .row(i, is_sel(Some(item.id.clone())), "")
                                                                                                                        },
                                                                                                                    );
                                                                                                                    let is_sel = is_selected.clone();
                                                                                                                    let selected_signal = Signal::derive(
                                                                                                                        cx,
                                                                                                                        move || is_sel(Some(item.id.clone())),
                                                                                                                    );
                                                                                                                    let row_data = create_read_slice(
                                                                                                                        cx,
                                                                                                                        local_items_state,
                                                                                                                        move |items| {
                                                                                                                            items
                                                                                                                                .as_ref()
                                                                                                                                .map(|c| {
                                                                                                                                    c
                                                                                                                                        .iter()
                                                                                                                                        .find(|it| it.id == item.id.clone())
                                                                                                                                        .map(|c| c.to_owned())
                                                                                                                                })
                                                                                                                                .flatten()
                                                                                                                        },
                                                                                                                    );
                                                                                                                    let row_key = item.id.clone();
                                                                                                                    {
                                                                                                                        if false {
                                                                                                                            #[allow(unreachable_code)]
                                                                                                                            ::leptos::component_view(
                                                                                                                                &DefaultTableRowRenderer,
                                                                                                                                cx,
                                                                                                                                ::leptos::component_props_builder(&DefaultTableRowRenderer)
                                                                                                                                    .class(#[allow(unused_braces)] class_signal)
                                                                                                                                    .row_data(#[allow(unused_braces)] row_data)
                                                                                                                                    .key(#[allow(unused_braces)] item.id.clone())
                                                                                                                                    .index(#[allow(unused_braces)] i)
                                                                                                                                    .selected(#[allow(unused_braces)] selected_signal)
                                                                                                                                    .on_click(#[allow(unused_braces)] on_row_select)
                                                                                                                                    .on_double_click(#[allow(unused_braces)] on_dbl_click)
                                                                                                                                    .children({
                                                                                                                                        Box::new(move |cx| {
                                                                                                                                            {
                                                                                                                                                leptos::Fragment::lazy(|| {
                                                                                                                                                    [
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.id = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.id.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 0usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] false)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.title = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.title.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 1usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] false)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.author = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.author.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 2usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] true)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultDateTimeUtcTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(
                                                                                                                                                                        &DefaultDateTimeUtcTableCellRenderer,
                                                                                                                                                                    )
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.publish_date = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .format_string(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        "%Y-%m-%d %H:%M:%S %z".to_string(),
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.publish_date.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 3usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] true)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                    ]
                                                                                                                                                        .to_vec()
                                                                                                                                                })
                                                                                                                                            }
                                                                                                                                                .with_view_marker("<DefaultTableRowRenderer/>-children")
                                                                                                                                        })
                                                                                                                                    })
                                                                                                                                    .build(),
                                                                                                                            )
                                                                                                                        } else {
                                                                                                                            ::leptos::component_view(
                                                                                                                                &DefaultTableRowRenderer,
                                                                                                                                cx,
                                                                                                                                ::leptos::component_props_builder(&DefaultTableRowRenderer)
                                                                                                                                    .class(#[allow(unused_braces)] class_signal)
                                                                                                                                    .row_data(#[allow(unused_braces)] row_data)
                                                                                                                                    .key(#[allow(unused_braces)] item.id.clone())
                                                                                                                                    .index(#[allow(unused_braces)] i)
                                                                                                                                    .selected(#[allow(unused_braces)] selected_signal)
                                                                                                                                    .on_click(#[allow(unused_braces)] on_row_select)
                                                                                                                                    .on_double_click(#[allow(unused_braces)] on_dbl_click)
                                                                                                                                    .children({
                                                                                                                                        Box::new(move |cx| {
                                                                                                                                            {
                                                                                                                                                leptos::Fragment::lazy(|| {
                                                                                                                                                    [
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.id = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.id.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 0usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] false)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.title = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.title.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 1usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] false)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.author = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.author.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 2usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] true)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultDateTimeUtcTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(
                                                                                                                                                                        &DefaultDateTimeUtcTableCellRenderer,
                                                                                                                                                                    )
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.publish_date = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .format_string(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        "%Y-%m-%d %H:%M:%S %z".to_string(),
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.publish_date.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 3usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] true)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                    ]
                                                                                                                                                        .to_vec()
                                                                                                                                                })
                                                                                                                                            }
                                                                                                                                                .with_view_marker("<DefaultTableRowRenderer/>-children")
                                                                                                                                        })
                                                                                                                                    })
                                                                                                                                    .build(),
                                                                                                                            )
                                                                                                                        }
                                                                                                                    }
                                                                                                                },
                                                                                                            )
                                                                                                            .build(),
                                                                                                    )
                                                                                                }
                                                                                            })
                                                                                    }
                                                                                }
                                                                                    .into_view(cx),
                                                                            ]
                                                                                .to_vec()
                                                                        })
                                                                    }
                                                                        .with_view_marker("<Transition/>-children")
                                                                })
                                                            })
                                                            .build(),
                                                    )
                                                } else {
                                                    ::leptos::component_view(
                                                        &Transition,
                                                        cx,
                                                        ::leptos::component_props_builder(&Transition)
                                                            .fallback(
                                                                #[allow(unused_braces)]
                                                                move || {
                                                                    {
                                                                        let _ = leptos::leptos_dom::html::tr;
                                                                        leptos::leptos_dom::html::tr(cx)
                                                                            .child((
                                                                                cx,
                                                                                {
                                                                                    let _ = leptos::leptos_dom::html::td;
                                                                                    leptos::leptos_dom::html::td(cx)
                                                                                        .attr("colspan", (cx, "4"))
                                                                                        .child("Loading...!")
                                                                                },
                                                                            ))
                                                                    }
                                                                },
                                                            )
                                                            .children({
                                                                Box::new(move |cx| {
                                                                    {
                                                                        leptos::Fragment::lazy(|| {
                                                                            [
                                                                                {
                                                                                    let on_dbl_click = on_dbl_click.clone();
                                                                                    move || {
                                                                                        let is_selected = |_| false;
                                                                                        let on_dbl_click = on_dbl_click.clone();
                                                                                        let items = memo_items.get();
                                                                                        items
                                                                                            .map(move |items| {
                                                                                                let items = items
                                                                                                    .into_iter()
                                                                                                    .enumerate()
                                                                                                    .collect::<Vec<_>>();
                                                                                                let on_dbl_click = on_dbl_click.clone();
                                                                                                {
                                                                                                    ::leptos::component_view(
                                                                                                        &For,
                                                                                                        cx,
                                                                                                        ::leptos::component_props_builder(&For)
                                                                                                            .each(#[allow(unused_braces)] move || items.clone())
                                                                                                            .key(#[allow(unused_braces)] |(_, item)| item.id.clone())
                                                                                                            .view(
                                                                                                                #[allow(unused_braces)]
                                                                                                                move |cx, (i, item)| {
                                                                                                                    let on_dbl_click = on_dbl_click.clone();
                                                                                                                    let is_sel = is_selected.clone();
                                                                                                                    let class_signal = Signal::derive(
                                                                                                                        cx,
                                                                                                                        move || {
                                                                                                                            class_provider
                                                                                                                                .clone()
                                                                                                                                .row(i, is_sel(Some(item.id.clone())), "")
                                                                                                                        },
                                                                                                                    );
                                                                                                                    let is_sel = is_selected.clone();
                                                                                                                    let selected_signal = Signal::derive(
                                                                                                                        cx,
                                                                                                                        move || is_sel(Some(item.id.clone())),
                                                                                                                    );
                                                                                                                    let row_data = create_read_slice(
                                                                                                                        cx,
                                                                                                                        local_items_state,
                                                                                                                        move |items| {
                                                                                                                            items
                                                                                                                                .as_ref()
                                                                                                                                .map(|c| {
                                                                                                                                    c
                                                                                                                                        .iter()
                                                                                                                                        .find(|it| it.id == item.id.clone())
                                                                                                                                        .map(|c| c.to_owned())
                                                                                                                                })
                                                                                                                                .flatten()
                                                                                                                        },
                                                                                                                    );
                                                                                                                    let row_key = item.id.clone();
                                                                                                                    {
                                                                                                                        if false {
                                                                                                                            #[allow(unreachable_code)]
                                                                                                                            ::leptos::component_view(
                                                                                                                                &DefaultTableRowRenderer,
                                                                                                                                cx,
                                                                                                                                ::leptos::component_props_builder(&DefaultTableRowRenderer)
                                                                                                                                    .class(#[allow(unused_braces)] class_signal)
                                                                                                                                    .row_data(#[allow(unused_braces)] row_data)
                                                                                                                                    .key(#[allow(unused_braces)] item.id.clone())
                                                                                                                                    .index(#[allow(unused_braces)] i)
                                                                                                                                    .selected(#[allow(unused_braces)] selected_signal)
                                                                                                                                    .on_click(#[allow(unused_braces)] on_row_select)
                                                                                                                                    .on_double_click(#[allow(unused_braces)] on_dbl_click)
                                                                                                                                    .children({
                                                                                                                                        Box::new(move |cx| {
                                                                                                                                            {
                                                                                                                                                leptos::Fragment::lazy(|| {
                                                                                                                                                    [
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.id = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.id.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 0usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] false)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.title = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.title.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 1usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] false)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.author = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.author.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 2usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] true)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultDateTimeUtcTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(
                                                                                                                                                                        &DefaultDateTimeUtcTableCellRenderer,
                                                                                                                                                                    )
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.publish_date = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .format_string(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        "%Y-%m-%d %H:%M:%S %z".to_string(),
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.publish_date.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 3usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] true)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                    ]
                                                                                                                                                        .to_vec()
                                                                                                                                                })
                                                                                                                                            }
                                                                                                                                                .with_view_marker("<DefaultTableRowRenderer/>-children")
                                                                                                                                        })
                                                                                                                                    })
                                                                                                                                    .build(),
                                                                                                                            )
                                                                                                                        } else {
                                                                                                                            ::leptos::component_view(
                                                                                                                                &DefaultTableRowRenderer,
                                                                                                                                cx,
                                                                                                                                ::leptos::component_props_builder(&DefaultTableRowRenderer)
                                                                                                                                    .class(#[allow(unused_braces)] class_signal)
                                                                                                                                    .row_data(#[allow(unused_braces)] row_data)
                                                                                                                                    .key(#[allow(unused_braces)] item.id.clone())
                                                                                                                                    .index(#[allow(unused_braces)] i)
                                                                                                                                    .selected(#[allow(unused_braces)] selected_signal)
                                                                                                                                    .on_click(#[allow(unused_braces)] on_row_select)
                                                                                                                                    .on_double_click(#[allow(unused_braces)] on_dbl_click)
                                                                                                                                    .children({
                                                                                                                                        Box::new(move |cx| {
                                                                                                                                            {
                                                                                                                                                leptos::Fragment::lazy(|| {
                                                                                                                                                    [
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.id = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.id.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 0usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] false)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.title = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.title.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 1usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] false)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(&DefaultTableCellRenderer)
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.author = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.author.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 2usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] true)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                        ::leptos::component_view(
                                                                                                                                                                &DefaultDateTimeUtcTableCellRenderer,
                                                                                                                                                                cx,
                                                                                                                                                                ::leptos::component_props_builder(
                                                                                                                                                                        &DefaultDateTimeUtcTableCellRenderer,
                                                                                                                                                                    )
                                                                                                                                                                    .on_change(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        move |v| {
                                                                                                                                                                            let row_key = row_key.clone();
                                                                                                                                                                            local_items_state
                                                                                                                                                                                .update_untracked(move |items| {
                                                                                                                                                                                    if let Some(mut value)
                                                                                                                                                                                        = items
                                                                                                                                                                                            .as_mut()
                                                                                                                                                                                            .map(|s| s.iter_mut().find(|it| it.key() == row_key))
                                                                                                                                                                                            .flatten()
                                                                                                                                                                                    {
                                                                                                                                                                                        value.publish_date = v;
                                                                                                                                                                                        action_set_row.dispatch((row_key, value.clone()));
                                                                                                                                                                                    }
                                                                                                                                                                                });
                                                                                                                                                                        },
                                                                                                                                                                    )
                                                                                                                                                                    .format_string(
                                                                                                                                                                        #[allow(unused_braces)]
                                                                                                                                                                        "%Y-%m-%d %H:%M:%S %z".to_string(),
                                                                                                                                                                    )
                                                                                                                                                                    .value(#[allow(unused_braces)] item.publish_date.clone())
                                                                                                                                                                    .class(#[allow(unused_braces)] class_provider.cell(""))
                                                                                                                                                                    .index(#[allow(unused_braces)] 3usize)
                                                                                                                                                                    .editable(#[allow(unused_braces)] true)
                                                                                                                                                                    .build(),
                                                                                                                                                            )
                                                                                                                                                            .into_view(cx),
                                                                                                                                                    ]
                                                                                                                                                        .to_vec()
                                                                                                                                                })
                                                                                                                                            }
                                                                                                                                                .with_view_marker("<DefaultTableRowRenderer/>-children")
                                                                                                                                        })
                                                                                                                                    })
                                                                                                                                    .build(),
                                                                                                                            )
                                                                                                                        }
                                                                                                                    }
                                                                                                                },
                                                                                                            )
                                                                                                            .build(),
                                                                                                    )
                                                                                                }
                                                                                            })
                                                                                    }
                                                                                }
                                                                                    .into_view(cx),
                                                                            ]
                                                                                .to_vec()
                                                                        })
                                                                    }
                                                                        .with_view_marker("<Transition/>-children")
                                                                })
                                                            })
                                                            .build(),
                                                    )
                                                },
                                            ))
                                    },
                                ))
                        }
                            .into_view(cx),
                        { broadcast_local_items_state }.into_view(cx),
                        { refetch_data_on_trigger }.into_view(cx),
                    ]
                        .to_vec()
                })
            }
        }
    }
    let BookTableProps {
        class,
        data_provider,
        range,
        on_row_double_click,
        current_state,
        trigger_refetch,
    } = props;
    ::leptos::leptos_dom::Component::new(
        "BookTable",
        move |cx| {
            __BookTable(
                cx,
                class,
                data_provider,
                range,
                on_row_double_click,
                current_state,
                trigger_refetch,
            )
        },
    )
}
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl _serde::Serialize for Book {
        fn serialize<__S>(
            &self,
            __serializer: __S,
        ) -> _serde::__private::Result<__S::Ok, __S::Error>
        where
            __S: _serde::Serializer,
        {
            let mut __serde_state = match _serde::Serializer::serialize_struct(
                __serializer,
                "Book",
                false as usize + 1 + 1 + 1 + 1 + 1,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "id",
                &self.id,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "title",
                &self.title,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "author",
                &self.author,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "publish_date",
                &self.publish_date,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            match _serde::ser::SerializeStruct::serialize_field(
                &mut __serde_state,
                "hidden_field",
                &self.hidden_field,
            ) {
                _serde::__private::Ok(__val) => __val,
                _serde::__private::Err(__err) => {
                    return _serde::__private::Err(__err);
                }
            };
            _serde::ser::SerializeStruct::end(__serde_state)
        }
    }
};
#[doc(hidden)]
#[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
const _: () = {
    #[allow(unused_extern_crates, clippy::useless_attribute)]
    extern crate serde as _serde;
    #[automatically_derived]
    impl<'de> _serde::Deserialize<'de> for Book {
        fn deserialize<__D>(
            __deserializer: __D,
        ) -> _serde::__private::Result<Self, __D::Error>
        where
            __D: _serde::Deserializer<'de>,
        {
            #[allow(non_camel_case_types)]
            #[doc(hidden)]
            enum __Field {
                __field0,
                __field1,
                __field2,
                __field3,
                __field4,
                __ignore,
            }
            #[doc(hidden)]
            struct __FieldVisitor;
            impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                type Value = __Field;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(
                        __formatter,
                        "field identifier",
                    )
                }
                fn visit_u64<__E>(
                    self,
                    __value: u64,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        0u64 => _serde::__private::Ok(__Field::__field0),
                        1u64 => _serde::__private::Ok(__Field::__field1),
                        2u64 => _serde::__private::Ok(__Field::__field2),
                        3u64 => _serde::__private::Ok(__Field::__field3),
                        4u64 => _serde::__private::Ok(__Field::__field4),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_str<__E>(
                    self,
                    __value: &str,
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        "id" => _serde::__private::Ok(__Field::__field0),
                        "title" => _serde::__private::Ok(__Field::__field1),
                        "author" => _serde::__private::Ok(__Field::__field2),
                        "publish_date" => _serde::__private::Ok(__Field::__field3),
                        "hidden_field" => _serde::__private::Ok(__Field::__field4),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
                fn visit_bytes<__E>(
                    self,
                    __value: &[u8],
                ) -> _serde::__private::Result<Self::Value, __E>
                where
                    __E: _serde::de::Error,
                {
                    match __value {
                        b"id" => _serde::__private::Ok(__Field::__field0),
                        b"title" => _serde::__private::Ok(__Field::__field1),
                        b"author" => _serde::__private::Ok(__Field::__field2),
                        b"publish_date" => _serde::__private::Ok(__Field::__field3),
                        b"hidden_field" => _serde::__private::Ok(__Field::__field4),
                        _ => _serde::__private::Ok(__Field::__ignore),
                    }
                }
            }
            impl<'de> _serde::Deserialize<'de> for __Field {
                #[inline]
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    _serde::Deserializer::deserialize_identifier(
                        __deserializer,
                        __FieldVisitor,
                    )
                }
            }
            #[doc(hidden)]
            struct __Visitor<'de> {
                marker: _serde::__private::PhantomData<Book>,
                lifetime: _serde::__private::PhantomData<&'de ()>,
            }
            impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                type Value = Book;
                fn expecting(
                    &self,
                    __formatter: &mut _serde::__private::Formatter,
                ) -> _serde::__private::fmt::Result {
                    _serde::__private::Formatter::write_str(__formatter, "struct Book")
                }
                #[inline]
                fn visit_seq<__A>(
                    self,
                    mut __seq: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::SeqAccess<'de>,
                {
                    let __field0 = match match _serde::de::SeqAccess::next_element::<
                        Uuid,
                    >(&mut __seq) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    } {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    0usize,
                                    &"struct Book with 5 elements",
                                ),
                            );
                        }
                    };
                    let __field1 = match match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    } {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    1usize,
                                    &"struct Book with 5 elements",
                                ),
                            );
                        }
                    };
                    let __field2 = match match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    } {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    2usize,
                                    &"struct Book with 5 elements",
                                ),
                            );
                        }
                    };
                    let __field3 = match match _serde::de::SeqAccess::next_element::<
                        DateTime<Utc>,
                    >(&mut __seq) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    } {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    3usize,
                                    &"struct Book with 5 elements",
                                ),
                            );
                        }
                    };
                    let __field4 = match match _serde::de::SeqAccess::next_element::<
                        String,
                    >(&mut __seq) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    } {
                        _serde::__private::Some(__value) => __value,
                        _serde::__private::None => {
                            return _serde::__private::Err(
                                _serde::de::Error::invalid_length(
                                    4usize,
                                    &"struct Book with 5 elements",
                                ),
                            );
                        }
                    };
                    _serde::__private::Ok(Book {
                        id: __field0,
                        title: __field1,
                        author: __field2,
                        publish_date: __field3,
                        hidden_field: __field4,
                    })
                }
                #[inline]
                fn visit_map<__A>(
                    self,
                    mut __map: __A,
                ) -> _serde::__private::Result<Self::Value, __A::Error>
                where
                    __A: _serde::de::MapAccess<'de>,
                {
                    let mut __field0: _serde::__private::Option<Uuid> = _serde::__private::None;
                    let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                    let mut __field2: _serde::__private::Option<String> = _serde::__private::None;
                    let mut __field3: _serde::__private::Option<DateTime<Utc>> = _serde::__private::None;
                    let mut __field4: _serde::__private::Option<String> = _serde::__private::None;
                    while let _serde::__private::Some(__key)
                        = match _serde::de::MapAccess::next_key::<__Field>(&mut __map) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                        match __key {
                            __Field::__field0 => {
                                if _serde::__private::Option::is_some(&__field0) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("id"),
                                    );
                                }
                                __field0 = _serde::__private::Some(
                                    match _serde::de::MapAccess::next_value::<
                                        Uuid,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                                );
                            }
                            __Field::__field1 => {
                                if _serde::__private::Option::is_some(&__field1) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("title"),
                                    );
                                }
                                __field1 = _serde::__private::Some(
                                    match _serde::de::MapAccess::next_value::<
                                        String,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                                );
                            }
                            __Field::__field2 => {
                                if _serde::__private::Option::is_some(&__field2) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field("author"),
                                    );
                                }
                                __field2 = _serde::__private::Some(
                                    match _serde::de::MapAccess::next_value::<
                                        String,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                                );
                            }
                            __Field::__field3 => {
                                if _serde::__private::Option::is_some(&__field3) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "publish_date",
                                        ),
                                    );
                                }
                                __field3 = _serde::__private::Some(
                                    match _serde::de::MapAccess::next_value::<
                                        DateTime<Utc>,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                                );
                            }
                            __Field::__field4 => {
                                if _serde::__private::Option::is_some(&__field4) {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::duplicate_field(
                                            "hidden_field",
                                        ),
                                    );
                                }
                                __field4 = _serde::__private::Some(
                                    match _serde::de::MapAccess::next_value::<
                                        String,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    },
                                );
                            }
                            _ => {
                                let _ = match _serde::de::MapAccess::next_value::<
                                    _serde::de::IgnoredAny,
                                >(&mut __map) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                };
                            }
                        }
                    }
                    let __field0 = match __field0 {
                        _serde::__private::Some(__field0) => __field0,
                        _serde::__private::None => {
                            match _serde::__private::de::missing_field("id") {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        }
                    };
                    let __field1 = match __field1 {
                        _serde::__private::Some(__field1) => __field1,
                        _serde::__private::None => {
                            match _serde::__private::de::missing_field("title") {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        }
                    };
                    let __field2 = match __field2 {
                        _serde::__private::Some(__field2) => __field2,
                        _serde::__private::None => {
                            match _serde::__private::de::missing_field("author") {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        }
                    };
                    let __field3 = match __field3 {
                        _serde::__private::Some(__field3) => __field3,
                        _serde::__private::None => {
                            match _serde::__private::de::missing_field("publish_date") {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        }
                    };
                    let __field4 = match __field4 {
                        _serde::__private::Some(__field4) => __field4,
                        _serde::__private::None => {
                            match _serde::__private::de::missing_field("hidden_field") {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            }
                        }
                    };
                    _serde::__private::Ok(Book {
                        id: __field0,
                        title: __field1,
                        author: __field2,
                        publish_date: __field3,
                        hidden_field: __field4,
                    })
                }
            }
            #[doc(hidden)]
            const FIELDS: &'static [&'static str] = &[
                "id",
                "title",
                "author",
                "publish_date",
                "hidden_field",
            ];
            _serde::Deserializer::deserialize_struct(
                __deserializer,
                "Book",
                FIELDS,
                __Visitor {
                    marker: _serde::__private::PhantomData::<Book>,
                    lifetime: _serde::__private::PhantomData,
                },
            )
        }
    }
};
#[automatically_derived]
impl ::core::fmt::Debug for Book {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field5_finish(
            f,
            "Book",
            "id",
            &self.id,
            "title",
            &self.title,
            "author",
            &self.author,
            "publish_date",
            &self.publish_date,
            "hidden_field",
            &&self.hidden_field,
        )
    }
}
#[automatically_derived]
impl ::core::clone::Clone for Book {
    #[inline]
    fn clone(&self) -> Book {
        Book {
            id: ::core::clone::Clone::clone(&self.id),
            title: ::core::clone::Clone::clone(&self.title),
            author: ::core::clone::Clone::clone(&self.author),
            publish_date: ::core::clone::Clone::clone(&self.publish_date),
            hidden_field: ::core::clone::Clone::clone(&self.hidden_field),
        }
    }
}
#[automatically_derived]
impl ::core::default::Default for Book {
    #[inline]
    fn default() -> Book {
        Book {
            id: ::core::default::Default::default(),
            title: ::core::default::Default::default(),
            author: ::core::default::Default::default(),
            publish_date: ::core::default::Default::default(),
            hidden_field: ::core::default::Default::default(),
        }
    }
}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for Book {}
#[automatically_derived]
impl ::core::cmp::PartialEq for Book {
    #[inline]
    fn eq(&self, other: &Book) -> bool {
        self.id == other.id && self.title == other.title && self.author == other.author
            && self.publish_date == other.publish_date
            && self.hidden_field == other.hidden_field
    }
}
fn main() {
    _ = console_log::init_with_level(log::Level::Debug);
    console_error_panic_hook::set_once();
    mount_to_body(|cx| {
        let get_current_provider_state = create_action(
            cx,
            move |provider: &StoredValue<MemoryStorage<Book>>| {
                let p = provider.get_value();
                async move { p.get_rows(0..1000).await.unwrap() }
            },
        );
        let append_row = create_action(
            cx,
            move |provider: &StoredValue<MemoryStorage<Book>>| {
                let mut p = provider.get_value();
                async move {
                    {
                        let lvl = ::log::Level::Debug;
                        if lvl <= ::log::STATIC_MAX_LEVEL && lvl <= ::log::max_level() {
                            ::log::__private_api_log(
                                format_args!(
                                    "{0:?}",
                                    p
                                        .append_row(Book {
                                            id: Uuid::default(),
                                            title: "The Great Gatsby".to_string(),
                                            author: "F. Scott Fitzgerald".to_string(),
                                            publish_date: DateTime::parse_from_rfc3339(
                                                    "1996-12-19T16:39:57+00:00",
                                                )
                                                .unwrap()
                                                .into(),
                                            hidden_field: "hidden".to_string(),
                                        })
                                        .await,
                                ),
                                lvl,
                                &("simple", "simple", "src/main.rs", 44u32),
                                ::log::__private_api::Option::None,
                            );
                        }
                    };
                }
            },
        );
        let current_provider_state = get_current_provider_state.value();
        let log_provider_state = move || {
            {
                let lvl = ::log::Level::Debug;
                if lvl <= ::log::STATIC_MAX_LEVEL && lvl <= ::log::max_level() {
                    ::log::__private_api_log(
                        format_args!(
                            "Provider state:\n{0:#?}",
                            current_provider_state.get(),
                        ),
                        lvl,
                        &("simple", "simple", "src/main.rs", 61u32),
                        ::log::__private_api::Option::None,
                    );
                }
            };
        };
        let range_to_show = create_rw_signal(cx, 0..4);
        let provider = store_value(
            cx,
            MemoryStorage::new(
                <[_]>::into_vec(
                    #[rustc_box]
                    ::alloc::boxed::Box::new([
                        Book {
                            id: Uuid::default(),
                            title: "The Great Gatsby".to_string(),
                            author: "F. Scott Fitzgerald".to_string(),
                            publish_date: DateTime::parse_from_rfc3339(
                                    "1996-12-19T16:39:57+00:00",
                                )
                                .unwrap()
                                .into(),
                            hidden_field: "hidden".to_string(),
                        },
                        Book {
                            id: Uuid::default(),
                            title: "The Grapes of Wrath".to_string(),
                            author: "John Steinbeck".to_string(),
                            publish_date: DateTime::parse_from_rfc3339(
                                    "1996-12-19T16:39:57+00:00",
                                )
                                .unwrap()
                                .into(),
                            hidden_field: "not visible in the table".to_string(),
                        },
                        Book {
                            id: Uuid::default(),
                            title: "Nineteen Eighty-Four".to_string(),
                            author: "George Orwell".to_string(),
                            publish_date: DateTime::parse_from_rfc3339(
                                    "1996-12-19T16:39:57+00:00",
                                )
                                .unwrap()
                                .into(),
                            hidden_field: "hidden".to_string(),
                        },
                        Book {
                            id: Uuid::default(),
                            title: "Ulysses".to_string(),
                            author: "James Joyce".to_string(),
                            publish_date: DateTime::parse_from_rfc3339(
                                    "1996-12-19T16:39:57+00:00",
                                )
                                .unwrap()
                                .into(),
                            hidden_field: "hidden".to_string(),
                        },
                    ]),
                ),
            ),
        );
        {
            {
                leptos::Fragment::lazy(|| {
                    [
                        ::leptos::component_view(
                                &BookTable,
                                cx,
                                ::leptos::component_props_builder(&BookTable)
                                    .data_provider(#[allow(unused_braces)] provider)
                                    .range(#[allow(unused_braces)] range_to_show)
                                    .build(),
                            )
                            .into_view(cx),
                        {
                            let _ = leptos::leptos_dom::html::button;
                            leptos::leptos_dom::html::button(cx)
                                .on(
                                    ::leptos::ev::click,
                                    move |_| {
                                        get_current_provider_state.dispatch(provider);
                                    },
                                )
                                .child((cx, { "Log current state to console" }))
                        }
                            .into_view(cx),
                        {
                            let _ = leptos::leptos_dom::html::button;
                            leptos::leptos_dom::html::button(cx)
                                .on(
                                    ::leptos::ev::click,
                                    move |_| {
                                        append_row.dispatch(provider);
                                    },
                                )
                                .child((cx, { "Append first row" }))
                        }
                            .into_view(cx),
                        { log_provider_state }.into_view(cx),
                    ]
                        .to_vec()
                })
            }
        }
    })
}
