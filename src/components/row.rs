use leptos::ev::MouseEvent;
use leptos::*;

/// Event emitted when a table row is clicked.
#[derive(Debug)]
pub struct TableRowEvent<K: 'static> {
    /// The key of the row. Value of the field of the struct with the `#[table(key)]` attribute.
    pub key: K,
    /// The index of the row. Starts at 0 for the first row.
    pub index: usize,
    /// The mouse event that triggered the event.
    pub mouse_event: MouseEvent,
}

/// The default table row renderer. Uses the `<tr>` element.
#[allow(unused_variables)]
#[component]
pub fn DefaultTableRowRenderer<K, F>(
    cx: Scope,
    /// The class attribute for the row element. Generated by the classes provider.
    #[prop(into)]
    class: MaybeSignal<String>,
    /// The index of the row. Starts at 0 for the first body row. The header row always has index 0 as well.
    #[prop(into)]
    key: K,
    /// The index of the row. Starts at 0 for the first body row.
    index: usize,
    /// The selected state of the row. True, when the row is selected.
    #[prop(into)]
    selected: Signal<bool>,
    /// The event handler for the click event. Has to be called with [`TableRowEvent`].
    on_click: F,
    /// The event handler for the double click event. Has to be called with [`TableRowEvent`].
    #[prop(optional)]
    on_double_click: Option<std::rc::Rc<dyn Fn(TableRowEvent<K>) + 'static>>,
    children: Children,
) -> impl IntoView
where
    F: Fn(TableRowEvent<K>) + 'static,
    K: Clone + 'static,
{
    let click_key = key.clone();
    let on_click_event = move |mouse_event| {
        on_click(TableRowEvent {
            key: click_key.clone(),
            index,
            mouse_event,
        })
    };
    let click_key = key.clone();
    let on_double_click_event = move |mouse_event| {
        if let Some(ref dbl) = on_double_click {
            dbl(TableRowEvent {
                key: click_key.clone(),
                index,
                mouse_event,
            })
        }
    };
    view! { cx,
        <tr class={move || class.get()} on:click=on_click_event on:dblclick=on_double_click_event>
            {children(cx)}
        </tr>
    }
}
